Legal output

Planck
------

Copyright Â© 2015-2016 Mike Fikes and Contributors
Distributed under the Eclipse Public License either version 1.0 or (at your
option) any later version.


Portions of Planck may utilize the following copyrighted material, the use of
which is hereby acknowledged.

Ambly
-----

Copyright Â© 2015 David Nolen
Licensed under the Eclipse Public License.


Linenoise
---------

Copyright (c) 2010-2014, Salvatore Sanfilippo <antirez at gmail dot com>
Copyright (c) 2010-2013, Pieter Noordhuis <pcnoordhuis at gmail dot com>

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Pretty (ANSI portion, ported for ClojureScript)
-----------------------------------------------

Â© Copyright 2013-2015, Aviso
Apache Software License 2.0.
http://www.apache.org/licenses/LICENSE-2.0


ZipZap
------

Copyright (c) 2012, Pixelglow Software.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Repeated ordered -e and -i, supressing nil
foo
[34m:a[m
bar
[34m2[m
foo
Test :cljs/quit
[34m1[m
Test quit
[34m1[m
Test exit
[34m1[m
Exit on first error
[34mtrue[m
ok
[1;31mx[m
Test cope with syntax errors
Invalid number format [34f]

Invalid token: a:

Multi-line data
[34m[1 2][m
Multi-line string
[34m"abc\ndef"[m
space before and after
[34m3[m
Test print to stderr
[34mnil[m
Test main
5
0
Test main zero
0
Test main one
0
Test main unhandled
1
Test main exit
17
Test REPL exit
nil
118
Test call fn exit
nil
119
Test run file with exit
111
Test in-ns
Argument to in-ns must be a symbol.
nil
Argument to in-ns must be a symbol.
nil
nil
[34m#'alpha.beta/x[m
nil
[34m#'gamma.delta/y[m
[34mnil[m
[34m#{:a}[m
nil
nil
[34m#{:a}[m
Test require REPL special
nil
[34mtrue[m
Test require REPL special exit in file
nil
195
Test require REPL special throws in file
before throw
[1;31mbye-bye[m
nil
0
Test require unknown ns
[1;31mNo such namespace: unknown_ns.core, could not locate unknown_ns/core.cljs, unknown_ns/core.cljc, or Closure namespace "unknown_ns.core"[m
nil
Test require :reload with const
nil
[34mnil[m
nil
[34m:initial[m
[34mnil[m
nil
[34m:reloaded[m
Test require :reload in changing spec
nil
[34mnil[m
nil
[34m:initial[m
[34mnil[m
nil
[34m:reloaded[m
Test require :reload-all
nil
[34mnil[m
nil
[34m:initial[m
[34mnil[m
nil
[34m:reloaded[m
Test require :reload with cache
nil
[34mnil[m
nil
[34m:initial[m
nil
[34m:initial[m
[34mnil[m
nil
[34m:reloaded[m
Test require-macros unknown ns
[1;31mNo such macros namespace: unknown-ns.core, could not locate unknown_ns/core.clj or unknown_ns/core.cljc[m
nil
Test require-macros REPL special
nil
[34m5[m
Test in-ns REPL special
nil
[34m:foo.bar/a[m
Test apropos
[34mnil[m
[34m#'foo.bar/xfirst[m
[34m#'foo.bar/nfirst[m
[34m#'foo.bar/ffirst-crazy[m
nil
[34m(cljs.core/ffirst cljs.core/nfirst foo.bar/ffirst-crazy foo.bar/xfirst)[m
[34m(cljs.core/ffirst foo.bar/ffirst-crazy)[m
[34m(cljs.core/ffirst foo.bar/ffirst-crazy)[m
Test dir
[34mnil[m
[34m#'foo.bar/xfirst[m
[34m#'foo.bar/nfirst[m
[34m#'foo.bar/macro-crazy[m
[34mnil[m
[34mtrue[m
nil
macro-crazy
somemacro
xfirst
[34mnil[m
Test doc special
[34mnil[m
-------------------------
cljs.core/inc
([x])
  Returns a number one greater than num.
[34mnil[m
-------------------------
cljs.core/when
([test & body])
Macro
  Evaluates test. If logical true, evaluates body in an implicit do.
[34mnil[m
-------------------------
if
   (if test then else?)
Special Form
  Evaluates test. If not the singular values nil or false,
  evaluates and yields then, otherwise, evaluates and yields else. If
  else is not supplied it defaults to nil.

  Please see http://clojure.org/special_forms#if
[34mnil[m
-------------------------
try
   (try expr* catch-clause* finally-clause?)
Special Form
  catch-clause => (catch classname name expr*)
  finally-clause => (finally expr*)
  Catches and handles JavaScript exceptions.

  Please see http://clojure.org/special_forms#try
[34mnil[m
-------------------------
planck.repl/doc
([sym])
Macro
  Prints documentation for a var or special form given its name
[34mnil[m
-------------------------
cljs.core/fn
   (fn name? [params*] exprs*)
   (fn name? ([params*] exprs*) +)
Macro
  params => positional-params* , or positional-params* & next-param
     positional-param => binding-form
     next-param => binding-form
     name => symbol

     Defines a function
[34mnil[m
-------------------------
cljs.core/IWriter
Protocol
  Protocol for writing. Currently only implemented by StringBufferWriter.

  -write
  ([writer s])
  Writes s with writer and returns the result.

  -flush
  ([writer])
  Flush writer.
[34mnil[m
[34m#'cljs.user/f[m
-------------------------
cljs.user/f
([param])
  docstring
[34mnil[m
nil
-------------------------
test-doc-source.core/my-function
([x])
  This is a cool
  function with a docstring.
[34mnil[m
-------------------------
test-doc-source.core/my-function
([x])
  This is a cool
  function with a docstring.
[34mnil[m
-------------------------
test-doc-source.core
  This is the namespace
  docstring for test-doc-source.core
[34mnil[m
Test source
Source not found
[34mnil[m
(defn inc
  "Returns a number one greater than num."
  [x] (cljs.core/+ x 1))
[34mnil[m
(core/defmacro when
     "Evaluates test. If logical true, evaluates body in an implicit do."
     [test & body]
     (core/list 'if test (cons 'do body)))
[34mnil[m
nil
(defn my-function
  "This is a cool
  function with a docstring."
  [x]
  (* x x))
[34mnil[m
(defn my-function
  "This is a cool
  function with a docstring."
  [x]
  (* x x))
[34mnil[m
nil
(defonce
  ^:dynamic
  *reader-fn*
  (fn [_]
    (throw (js/Error. "No *reader-fn* fn set."))))
[34mnil[m
Test pst special
nil
[34mtrue[m
[34m#'cljs.user/f[m
[34m#'cljs.user/g[m
[1;31mwhoah[m
[1;31mwhoah[m
[34mnil[m
[34m#'cljs.user/e[m
[1;31mouch[m
[1;31mouch[m
[34mnil[m
[1;31mwhoah[m
[34mnil[m
Test load-file REPL special
nil
[34mtrue[m
nil
[34m3[m
[34m4[m
Test load-file from classpath
nil
[34mtrue[m
Test doc support for load-file REPL special
-------------------------
load-file
([name])
REPL Special Function
  Sequentially read and evaluate the set of forms contained in the file.
[34mnil[m
Test load-file REPL bad filename
[1;31mCould not load file int-test/src/test_load_file/nofile.cljs[m
nil
Test load-file REPL error in file
[34mnil[m
Test load-file REPL exit in file
nil
132
Spit / slurp
[34m#'cljs.user/test-file[m
nil
[34m#'cljs.user/test-spit-slurp[m
true
[34mnil[m
true
[34mnil[m
true
[34mnil[m
true
[34mnil[m
true
[34mnil[m
Shell
nil
[34m#{[:err ""] [:exit 0] [:out "hello\n"]}[m
Shell throws
nil
expected
[34mnil[m
Shell with-sh-dir
nil
[34m"/private/tmp\n"[m
nil
[34m"/private/tmp\n"[m
Shell stderr
nil
[34m#{[:err "[31mthis is from stderr[m[31m\n[m"] [:exit 0] [:out ""]}[m
Coercions
nil
nil
[34mnil[m
[34m#planck.io.File{:path "abc"}[m
[34m#planck.io.File{:path "abc"}[m
[34m"abc"[m
reader and read-line
nil
[34m#'cljs.user/test-read[m
nil
nil
nil
[34mnil[m
"a"
nil
nil
[34mnil[m
"a"
nil
nil
[34mnil[m
"a"
nil
nil
[34mnil[m
"a"
"b"
nil
[34mnil[m
"a"
"b"
nil
[34mnil[m
reader and line-seq
nil
[34m#'cljs.user/test-read[m
nil
[34mnil[m
("a")
[34mnil[m
("a")
[34mnil[m
("a")
[34mnil[m
("a" "b")
[34mnil[m
("a" "b")
[34mnil[m
writer
nil
[34m#'cljs.user/test-write[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
writer append
nil
[34m#'cljs.user/test-write[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
[34mtrue[m
reader close
nil
[34mtrue[m
nil
[34m#'cljs.user/r[m
[34mnil[m
[1;31mFile closed.[m
writer close
nil
[34mtrue[m
nil
[34m#'cljs.user/w[m
[34mnil[m
[1;31mFile closed.[m
Test write and read binary
nil
[34m#'cljs.user/binary-file[m
[34mnil[m
[1 2 3]
[34mnil[m
[34mnil[m
[1 2 3 4 5 6]
[34mnil[m
[34mnil[m
[7 8 9 10]
[34mnil[m
[34mnil[m
Test encoding
nil
[34m#'cljs.user/content[m
[34m#'cljs.user/filename[m
[34mnil[m
[34mtrue[m
Test file-seq
nil
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/B}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/B/E}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/B/F}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/C}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/C/G}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/D}
[34mnil[m
Test Google Closure index
[34mnil[m
Test availability of goog libs
nil
[34m#object[Object 20050403][m
Test empty list of *command-line-args*
nil
[34mnil[m
Test empty list of *command-line-args* following main opt
nil
[34mnil[m
Treat init opts that follow -r main opt as *command-line-args* instead of evaluating them
nil
[34m("-c" "src" "-e" "(println \"hi\")" "-v")[m
Treat init opts that follow nice -m ns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat init opts that follow nice --main=ns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat init opts that follow less nice -mns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat main opts that follow a main opt as *command-line-args* instead of evaluating them
nil
[34m("-" "-m" "test-main.args" "-r")[m
Test *command-line-args* with nice clumped init opts
hi
nil
[34m("here" "are" "some" "args")[m
Test *command-line-args* with less nicely clumped init opts
hi
nil
[34m("here" "are" "some" "args")[m
Test binding of *command-line-args* in file run from command line
(here are some args)
0
Test classpath
nil
[34m:src[m
nil
[34m:src2[m
Test JAR support
nil
[34m"Hello, from JAR"[m
Test reader/tag literals
[34m#js [1 2][m
[34m#inst "2015-08-18T01:53:14.614-00:00"[m
Test verbose w/o var code
[34m#'cljs.user/a[m
[34m#'cljs.user/b[m
Test restore state when require fails
[1;31mCould not parse ns form cljs.user[m
[1;31mInvalid :refer, var var clojure.set/diff does not exist[m
nil
nil
Test reader and analysis diagnostics
[1;31mCould not eval (ns cljs.user (:require [foo.bar :quu]))[m
[1;31mOnly :as alias and :refer (names) options supported in :require; offending spec: [foo.bar :quu] at line 1 [m
nil
Unmatched delimiter )

Test eval
nil
[34m1[m
[34m3[m
[34m#'cljs.user/a[m
[34m3[m
[34m17[m
[34m#'cljs.user/a[m
[34m#'cljs.user/addition-list[m
[34m3[m
[34m13[m
[34m#'cljs.user/lucky-number[m
[34m13[m
[34m#'cljs.user/square[m
[34m#'cljs.user/cube[m
[34m64[m
[34m5[m
[34m#'cljs.user/addition-list2[m
[34m3[m
[34m4[m
Test resolve
nil
[34m#'cljs.core/+[m
[34m#'cljs.user/f[m
[34m1000[m
Test ns-resolve
nil
[34mnil[m
[34m#'foo.bar/+[m
nil
[34m#'cljs.core/+[m
[34m#'foo.bar/+[m
Test intern
[34mnil[m
nil
nil
[34m#'foo.core/a[m
[34m{a #'foo.core/a}[m
[34m3[m
[34m#'foo.core/b[m
[34m17[m
[34m#'foo.core/d[m
[34m18[m
[34m#'foo.core/c[m
[34mfalse[m
[34mnil[m
Test with-open
nil
[34mcljs.user/Foo[m
Body1
Body2
Close :y
Close :x
[34mnil[m
[1;31mwith-open requires an even number of forms in binding vector at line 1 [m
[1;31mwith-open requires a vector for its bindings at line 1 [m
Test planck.repl publics
apropos
dir
doc
find-doc
pst
source
[34mnil[m
Ensure we can get into Planck REPL ns and all ns are loaded
nil
nil
[34m22[m
